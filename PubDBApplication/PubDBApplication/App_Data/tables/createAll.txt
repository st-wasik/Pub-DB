create table Address
(
id int primary key identity (1,1), 
building_no int not null,
street varchar(30) not null,
city varchar(30) not null,
postal_code varchar(6),
[RowVersion]  INT DEFAULT 1 NOT NULL,
constraint CKBuildNo check (building_no>0),
CONSTRAINT UniqAddress UNIQUE (building_no, street, city, postal_code)
);

create table Pubs
(
id int primary key identity (1,1),
name varchar(30) not null,
adress_id int not null,
[e-mail] varchar(50),
telephone_no varchar(12),
[RowVersion] INT DEFAULT 1 NOT NULL,
CONSTRAINT UniqNamePubs UNIQUE (name),
constraint FKPubsAddress foreign key (adress_id) references Address(id)
);

create table Producers
(
id int primary key identity (1,1),
name varchar(30) not null,
adress_id int not null,
[e-mail] varchar(50),
telephone_no varchar(12),
[RowVersion]  INT DEFAULT 1 NOT NULL,
CONSTRAINT UniqNameProducers unique(name),
constraint FKProducersAddress foreign key (adress_id) references Address(id)
);

create table Products
(
id int primary key identity (1,1),
name varchar(30) not null,
producer_id int not null,
price money not null,
alcohol_percentage int not null,
volume real not null,
[RowVersion]  INT DEFAULT 1 NOT NULL,
CONSTRAINT UniqNameProducts unique(name),
constraint CKPrice check (price>0),
constraint CKVolume check (volume>0),
constraint CKAlco check (alcohol_percentage>0),
constraint FKProducer foreign key (producer_id) references Producers(id)
);

create table Warehouses
(
id int primary key identity (1,1),
name varchar(30) not null,
[RowVersion]  INT DEFAULT 1 NOT NULL,
CONSTRAINT UniqNameWarehouses unique(name)
);

create table Orders
(
id int primary key identity (1,1),
warehouse_id int not null,
pub_id int,
producer_id int,
[Incoming/Outcoming] varchar(15) not null,
status varchar(30) not null,
[date] datetime not null,
constraint FKOrdersPubs foreign key (pub_id) references Pubs(id),
constraint FKOrdersProducers foreign key (producer_id) references Producers(id),
constraint FKOrdersWarehouses foreign key (warehouse_id) references Warehouses(id)
);

create table OrderDetails
(
id int primary key identity (1,1),
order_id int not null,
quantity int not null,
product_id int not null,
constraint CKQuantityOD check (quantity>0),
constraint FKOrders foreign key (order_id) references Orders(id) on delete cascade,
constraint FKODProducts foreign key (product_id) references Products(id)
);

create table WarehousesStock
(
id int primary key identity (1,1),
warehouse_id int not null,
product_id int not null,
quantity int not null,
constraint CKQuantityWS check (quantity>-1),
constraint FKWSWarehouses foreign key (warehouse_id) references Warehouses(id),
constraint FKWSProducts foreign key (product_id) references Products(id)
);

create view ProductsView as
select p.id, p.name, pr.name as producer_name, p.price, p.alcohol_percentage, p.volume, p.RowVersion
from Products p join Producers pr on p.producer_id = pr.id

create view OrdersView as
select o.id, w.name as warehouse_name, pu.name as pub_name, pr.name as producer_name, o.[Incoming/Outcoming], o.status, o.date, dbo.totalPrice(o.id) as total
from Orders o 
	 join Warehouses w on o.warehouse_id = w.id 
	 left join Pubs pu on o.pub_id = pu.id 
	 left join Producers pr on o.producer_id = pr.id

create view OrderDetailsView as
select o.id, o.order_id, p.name as product_name, o.quantity, p.price, ROUND(o.quantity*p.price,2) as amount from OrderDetails o join Products p on o.product_id=p.id

create view WarehousesStockView as
select ws.id, w.name as warehouse_name, p.name as product_name, ws.quantity
from WarehousesStock ws join Warehouses w on ws.warehouse_id=w.id join
	Products p on ws.product_id = p.id
	
create view mostPopularProducers as
	select p.name, placedOrdersCount from (
		select producer_id, COUNT(*) placedOrdersCount from Orders o
		where producer_id is not null AND status = 'Completed'
		group by o.producer_id
		order by count(*) desc offset 0 rows
	) subq join Producers p on subq.producer_id = p.id


